generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DIRECTOR
  STAFF
  ADVISOR
}

enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  SELECT
  RADIO
  CHECKBOX
}

enum TicketStatus {
  OPEN
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum TicketSenderType {
  STUDENT
  ASSOCIATE
  DIRECTOR
}

enum DocumentType {
  PASSPORT
  VISA
  ACADEMIC_TRANSCRIPT
  DEGREE_CERTIFICATE
  LANGUAGE_TEST
  FINANCIAL_STATEMENT
  MEDICAL_CERTIFICATE
  POLICE_CLEARANCE
  BIRTH_CERTIFICATE
  MARRIAGE_CERTIFICATE
  WORK_EXPERIENCE
  RECOMMENDATION_LETTER
  STATEMENT_OF_PURPOSE
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  RESUBMISSION_REQUIRED
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  COMPLETED
  REJECTED
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  mpinHash     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Student {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  passwordHash      String
  phone             String   @unique
  gender            String
  dob               DateTime
  nationality       String
  citizenship       String
  countryPreference String
  extra             Json?

  associateId String
  associate   Associate @relation(fields: [associateId], references: [id], onDelete: Cascade)

  approved     Boolean    @default(false)
  approvedAt   DateTime?
  approvedById String?
  approvedBy   Associate? @relation("ApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)

  tickets        Ticket[]        @relation("StudentTickets")
  ticketMessages TicketMessage[] @relation("StudentTicketMessages")

  verificationRequests DocumentVerificationRequest[]
  documents            StudentDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Associate {
  id           String @id @default(uuid())
  username     String @unique
  email        String @unique
  passwordHash String
  role         Role   @default(STAFF)

  todos            Todo[]
  userDetails      UserDetails[]
  loginLogs        AssociateLoginLog[]
  staffTasks       StaffTasks[]
  students         Student[]
  emailService     EmailService[]
  approvedStudents Student[]           @relation("ApprovedBy")
  tickets          Ticket[]            @relation("AssociateTickets")
  ticketMessages   TicketMessage[]     @relation("AssociateTicketMessages")

  createdDocumentRequirements DocumentRequirement[]         @relation("DocumentRequirementCreatedBy")
  assignedVerifications       DocumentVerificationRequest[] @relation("AssignedVerifications")
  reviewedVerifications       DocumentVerificationRequest[] @relation("ReviewedVerifications")
  reviewedDocuments           StudentDocument[]             @relation("DocumentReviewer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailService {
  id       String @id @default(uuid())
  email    String
  password String

  associateId String
  associate   Associate @relation(fields: [associateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Visa {
  id          String   @id @default(uuid())
  title       String
  description String
  slug        String   @unique
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AboutUs {
  id          String   @id @default(uuid())
  imageUrl    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WhyChooseUs {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Country {
  id          String   @id @default(uuid())
  title       String
  description String
  slug        String   @unique
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  colleges College[]

  documentRequirements DocumentRequirement[]
  verificationRequests DocumentVerificationRequest[] @relation("VerificationRequests")
}

model College {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @unique
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SiteDetails {
  id                 String   @id @default("site")
  phone              String?
  email              String?
  facebook           String?
  twitter            String?
  youtube            String?
  address            String?
  maintenanceMode    Boolean  @default(false)
  maintenanceMessage String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Team {
  id        String   @id @default(uuid())
  imageUrl  String
  name      String   @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String
  visaType  String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id          String    @id @default(uuid())
  date        DateTime
  title       String
  status      Boolean   @default(false)
  associateId String
  associate   Associate @relation(fields: [associateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StaffTasks {
  id          String   @id @default(uuid())
  date        DateTime
  title       String
  description String
  file        String?
  status      Boolean  @default(false)

  associateId String
  associate   Associate @relation(fields: [associateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDetails {
  id                String   @id @default(uuid())
  name              String
  email             String   @unique
  phone             String   @unique
  gender            String
  dob               DateTime
  nationality       String
  citizenship       String
  countryPreference String

  approved   Boolean   @default(false)
  approvedAt DateTime?

  associateId String
  associate   Associate @relation(fields: [associateId], references: [id], onDelete: Cascade)

  values UserDetailValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDetailField {
  id       String    @id @default(uuid())
  label    String
  name     String    @unique
  type     FieldType
  required Boolean   @default(false)
  options  Json?
  order    Int       @default(0)
  active   Boolean   @default(true)

  values UserDetailValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDetailValue {
  id            String @id @default(uuid())
  userDetailsId String
  fieldId       String
  value         Json

  userDetails UserDetails     @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  field       UserDetailField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userDetailsId])
  @@index([fieldId])
}

model AssociateLoginLog {
  id          String     @id @default(uuid())
  associateId String?
  associate   Associate? @relation(fields: [associateId], references: [id], onDelete: SetNull)
  username    String
  ip          String?
  userAgent   String?
  success     Boolean
  message     String?
  createdAt   DateTime   @default(now())
}

model Notice {
  id          String   @id @default("notice")
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id            String         @id @default(uuid())
  title         String
  description   String
  status        TicketStatus   @default(OPEN)
  priority      TicketPriority @default(MEDIUM)
  attachmentUrl String?

  studentId String
  student   Student @relation("StudentTickets", fields: [studentId], references: [id], onDelete: Cascade)

  associateId String
  associate   Associate @relation("AssociateTickets", fields: [associateId], references: [id], onDelete: Cascade)

  messages TicketMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([associateId])
}

model TicketMessage {
  id            String  @id @default(uuid())
  ticketId      String
  ticket        Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  content       String
  attachmentUrl String?

  senderType  TicketSenderType
  studentId   String?
  associateId String?

  student   Student?   @relation("StudentTicketMessages", fields: [studentId], references: [id], onDelete: SetNull)
  associate Associate? @relation("AssociateTicketMessages", fields: [associateId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([ticketId])
  @@index([studentId])
  @@index([associateId])
}

model DocumentRequirement {
  id        String  @id @default(uuid())
  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  documentType DocumentType
  title        String
  description  String?
  required     Boolean      @default(true)
  maxFileSize  Int          @default(5242880)
  allowedTypes String[]     @default(["pdf", "jpg", "jpeg", "png", "doc", "docx"])
  order        Int          @default(0)
  active       Boolean      @default(true)

  createdById String
  createdBy   Associate @relation("DocumentRequirementCreatedBy", fields: [createdById], references: [id])

  documents StudentDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([countryId, documentType, title])
  @@index([countryId])
}

model DocumentVerificationRequest {
  id        String  @id @default(uuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  countryId String
  country   Country @relation("VerificationRequests", fields: [countryId], references: [id])

  status VerificationStatus @default(PENDING)

  assignedToId String?
  assignedTo   Associate? @relation("AssignedVerifications", fields: [assignedToId], references: [id], onDelete: SetNull)

  reviewedById String?
  reviewedBy   Associate? @relation("ReviewedVerifications", fields: [reviewedById], references: [id], onDelete: SetNull)

  reviewedAt  DateTime?
  reviewNotes String?

  documents StudentDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([countryId])
  @@index([status])
  @@index([assignedToId])
}

model StudentDocument {
  id String @id @default(uuid())

  requirementId String
  requirement   DocumentRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  verificationRequestId String
  verificationRequest   DocumentVerificationRequest @relation(fields: [verificationRequestId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  fileName     String
  originalName String
  fileUrl      String
  fileSize     Int
  mimeType     String

  status DocumentStatus @default(PENDING)

  reviewedById String?
  reviewedBy   Associate? @relation("DocumentReviewer", fields: [reviewedById], references: [id], onDelete: SetNull)

  reviewedAt      DateTime?
  reviewNotes     String?
  rejectionReason String?

  // For resubmissions
  parentDocumentId String?
  parentDocument   StudentDocument?  @relation("DocumentResubmission", fields: [parentDocumentId], references: [id])
  resubmissions    StudentDocument[] @relation("DocumentResubmission")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([requirementId])
  @@index([verificationRequestId])
  @@index([studentId])
  @@index([status])
}
